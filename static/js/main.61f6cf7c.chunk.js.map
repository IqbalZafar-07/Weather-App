{"version":3,"sources":["components/CityInput/index.js","components/CityWeather/index.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchCityWeather","React","useState","error","setError","Form","className","Group","controlId","Label","Control","type","placeholder","id","value","onChange","e","target","Button","variant","onClick","CityWeather","cityWeather","country","visibility","console","log","humidity","temp","temp_max","temp_min","toFixed","Table","striped","bordered","hover","size","font","App","setCityWeather","setVisibility","setCountry","fetch","then","response","json","result","sys","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementsByTagName","style","backgroundImage","ReactDOM","render","StrictMode","getElementById"],"mappings":"uOAqCeA,EAlCG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBAAuB,EAI/BC,IAAMC,SAAS,IAJgB,mBAIlDC,EAJkD,KAI3CC,EAJ2C,KAYzD,OACE,eAACC,EAAA,EAAD,CAAMC,UAAU,QAAhB,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,UAAU,iBAAtB,UACE,cAACH,EAAA,EAAKI,MAAN,CAAYH,UAAU,WAAtB,+BACA,cAACD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,YAAY,uBACZC,GAAG,QACHC,MAAOhB,EACPiB,SApBkB,SAACC,GACzBjB,EAAQiB,EAAEC,OAAOH,aAsBf,mBAAGR,UAAU,cAAb,SAA4BH,IAC5B,8BACE,cAACe,EAAA,EAAD,CAAQZ,UAAU,UAAUa,QAAQ,OAAOC,QArB5B,WACdtB,EAGHE,IAFAI,EAAS,0BAmBP,yB,QC6BOiB,EAxDK,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC3CC,QAAQC,IAAIJ,EAAYE,YADoC,IAEtDG,EAAuCL,EAAvCK,SAAUC,EAA6BN,EAA7BM,KAAMC,EAAuBP,EAAvBO,SAAUC,EAAaR,EAAbQ,SAMhC,OALY,MAARF,IACFA,GAAQA,EAAO,KAAKG,QAAQ,GAAK,QACjCF,GAAYA,EAAW,KAAKE,QAAQ,GAAK,QACzCD,GAAYA,EAAW,KAAKC,QAAQ,GAAK,SAE/B,MAARH,EAEA,mCACE,sBAAMtB,UAAU,QAAhB,SACE,cAAC0B,EAAA,EAAD,CACE1B,UAAU,MACV2B,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLhB,QAAQ,OACRiB,KAAK,QACLC,KAAK,OAPP,SASE,kCACE,+BACE,yCACA,6BAAKV,OAEP,+BACE,6CACA,6BAAKC,OAEP,+BACE,iDACA,6BAAKC,OAEP,+BACE,iDACA,6BAAKC,OAEP,+BACE,yCACA,6BAAKP,OAEP,+BACE,4CACA,6BAAKC,gBAQV,yBCxBIc,EA3BH,WAAO,IAAD,EACOrC,IAAMC,SAAS,IADtB,mBACTJ,EADS,KACJC,EADI,OAEqBE,IAAMC,SAAS,IAFpC,mBAEToB,EAFS,KAEGiB,EAFH,OAGiBtC,IAAMC,SAAS,IAHhC,mBAGTsB,EAHS,KAGEgB,EAHF,OAIWvC,IAAMC,SAAS,IAJ1B,mBAITqB,EAJS,KAIDkB,EAJC,KAmBhB,OACE,qCACA,cAAC,EAAD,CAAW3C,KAAMA,EAAMC,QAASA,EAASC,iBAfpB,WACrB0C,MAAM,oDAAD,OACiD5C,EADjD,4CAGJ6C,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACG,GACLrB,QAAQC,IAAIoB,GACZN,EAAcM,EAAOtB,YACrBiB,EAAWK,EAAOC,IAAIxB,SACtBgB,EAAeO,EAAOE,YAOxB,cAAC,EAAD,CAAa1B,YAAaA,EAAaC,QAASA,EAASC,WAAYA,QCb1DyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,SAASC,qBAAqB,QAAQ,GAAGC,MAAMC,gBAC7C,0EACFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFN,SAASO,eAAe,SAM1Bf,M","file":"static/js/main.61f6cf7c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport \"./style.css\";\r\nconst CityInput = ({ city, setCity, fetchCityWeather }) => {\r\n  const handleInputChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n  const [error, setError] = React.useState(\"\");\r\n  const handleSubmit = () => {\r\n    if (!city) {\r\n      setError(\"City Field is empty!!\");\r\n    } else {\r\n      fetchCityWeather();\r\n    }\r\n  };\r\n  return (\r\n    <Form className=\"form1\">\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label className=\"cityname\">Enter City Name :</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"City(eg : darbhanga)\"\r\n          id=\"input\"\r\n          value={city}\r\n          onChange={handleInputChange}\r\n        />\r\n      </Form.Group>\r\n      <p className=\"text-danger\">{error}</p>\r\n      <div>\r\n        <Button className=\"button1\" variant=\"info\" onClick={handleSubmit}>\r\n          Check\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default CityInput;\r\n","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nconst CityWeather = ({ cityWeather, country, visibility }) => {\r\n  console.log(cityWeather.visibility);\r\n  let { humidity, temp, temp_max, temp_min } = cityWeather;\r\n  if (temp != null) {\r\n    temp = (temp - 273).toFixed(2) + \"°C\";\r\n    temp_max = (temp_max - 273).toFixed(2) + \"°C\";\r\n    temp_min = (temp_min - 273).toFixed(2) + \"°C\";\r\n  }\r\n  if (temp != null)\r\n    return (\r\n      <>\r\n        <form className=\"form1\">\r\n          <Table\r\n            className=\"tbl\"\r\n            striped\r\n            bordered\r\n            hover\r\n            variant=\"dark\"\r\n            size=\"small\"\r\n            font=\"20px\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Humidty</th>\r\n                <td>{humidity}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Temperature</th>\r\n                <td>{temp}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Max Temperature</th>\r\n                <td>{temp_max}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Min Temperature</th>\r\n                <td>{temp_min}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Country</th>\r\n                <td>{country}</td>\r\n              </tr>\r\n              <tr>\r\n                <th>Visibility</th>\r\n                <td>{visibility}</td>\r\n              </tr>\r\n            </thead>\r\n          </Table>\r\n        </form>\r\n      </>\r\n    );\r\n  else {\r\n    return <div></div>;\r\n  }\r\n};\r\n\r\nexport default CityWeather;\r\n","import React from 'react';\nimport CityInput from \"./components/CityInput\";\nimport CityWeather from \"./components/CityWeather\";\nconst App = () => {\n  const [city,setCity] = React.useState(\"\");\n  const [cityWeather,setCityWeather] = React.useState({});\n  const [visibility,setVisibility]=React.useState(\"\");\n  const [country,setCountry]=React.useState(\"\");\n\n  const fetchCityWeather=()=>{\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=4c496af33d732297c30b641b3b235e47`\n    )\n    .then((response)=>response.json())\n    .then((result)=>{\n      console.log(result);\n      setVisibility(result.visibility);\n      setCountry(result.sys.country);\n      setCityWeather(result.main);\n    });\n  };\n  \n  return (\n    <>\n    <CityInput city={city} setCity={setCity} fetchCityWeather={fetchCityWeather}/>\n    <CityWeather cityWeather={cityWeather} country={country} visibility={visibility} />\n    </>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ndocument.getElementsByTagName(\"body\")[0].style.backgroundImage =\n  \"https://wi-images.condecdn.net/image/doEYpG6Xd87/crop/810/f/weather.jpg\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}